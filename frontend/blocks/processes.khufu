import {entries} from '../util/object'
import {execute} from '../util/action'
import {total_processes} from '../util/schedule'
import {value, bool, set, init, toggle} from '../stores/simple'


style:
  .rotate
    animation-name: rotateThis
    animation-duration: .5s
    animation-iteration-count: infinite
    animation-timing-function: linear
  .buttons
    display: flex
    flex-wrap: wrap
    padding: 0px
    margin: -8px
  .button-block
    display: flex
    align-items: center
    transition: height 2s
    height: 46px
  .button-block.confirm
    height: 120px
  .button-id
    font-size: 150%
    padding: 4px 2px 4px 12px
  .button-btn
    margin: 0px 4px
  .panel
    max-width: 40ex
  .well.confirm
    margin: 8px


view buttons(role_name, buttons, host, daemon, @actions):
  <div.buttons>
    store @confirm = value
    for button of buttons key button.id:
      <div.button-block.confirm?(@confirm and button.id == @confirm.id)>
        let kind = button.kind ? button.kind : 'default'
        if button.confirm:
          if @confirm and button.id == @confirm.id:
            <div.confirm.well>
              <div.confirm-title>
                button.confirm
              <button.btn.button-btn.btn-danger>
                link {click} set(null) -> @confirm
                link {click} execute(
                    {"button": {action: button.id,
                                host: host,
                                daemon: daemon,
                                data: button.data,
                                role: role_name}}
                  ) -> @actions
                "Yes"
              <button.btn.button-btn.btn-success>
                link {click} set(null) -> @confirm
                "No"
          else:
            <button.btn.button-btn.btn-sm class=`btn-${ kind }`>
              link {click} set(
                {id: button.id, host: host, daemon: daemon}
                ) -> @confirm
              button.title
              for [id, act] of entries(@actions) key id:
                let abut = act.button
                if (abut.action == button.id and abut.daemon == daemon and
                    abut.host == host):
                  " "
                  <span.glyphicon.glyphicon-refresh.rotate>
        else:
          <button.btn.button-btn.btn-sm class=`btn-${ kind }`>
            link {click} set(null) -> @confirm
            link {click} execute(
                {button: {action: button.id,
                          host: host,
                          daemon: daemon,
                          data: button.data,
                          role: role_name}}
              ) -> @actions
            button.title
            for [id, act] of entries(@actions) key id:
              let abut = act.button
              if (abut.action == button.id and abut.daemon == daemon and
                  abut.host == host):
                " "
                <span.glyphicon.glyphicon-refresh.rotate>


view main(@actions, schedule, role, role_name, is_leader):
  let [proc, rows] = total_processes(schedule, role_name)
  <div>
    store @show = bool | init(rows <= 12)
    <h2>
      `Processes [${proc}] `
      <button.btn.btn-default.btn-xs>
        link {click} toggle(@show) -> @show
        if @show:
          <span.glyphicons.glyphicon-minus>
        else:
          <span.glyphicons.glyphicon-plus>
    if @show:
      <table.table.table-hover>
        <thead>
          <tr>
            <th> "Host"
            <th> "Process"
            <th> "Image"
            <th> "Num"
            <th> "Actions"
        for [host, node] of entries(schedule.nodes) key host:
          let hrole = node.roles[role_name]
          <tbody>
            if hrole:
              for [kind, props] of entries(hrole.daemons) key kind:
                <tr>
                  <td>
                    host
                  <td>
                    kind
                  <td>
                    props.image
                  <td>
                    props.instances
                  <td>
                    if is_leader and role.daemon_actions:
                      buttons(role_name, role.daemon_actions,
                              host, kind, ->@actions)
                    else:
                      ""
