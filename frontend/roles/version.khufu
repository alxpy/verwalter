// A frontend that allows to switch version of the role
import {entries, repr, pretty, is_string, reversed} from '../util/object'
import pending_actions from '../stores/actions'
import {refresher, json} from '../middleware/request'
import {execute} from '../util/action'
import {is_leader} from '../util/status'
import {total_processes} from '../util/schedule'
import {show_leaders} from '../util/leaders.khufu'
import {logs} from './logs.khufu'
import {value, set, init} from '../stores/simple'
import {url_query, smart_query} from '../util/routing'
import {filter_versions} from '../util/version'
import {main as versions} from '../blocks/version_buttons.khufu'


style:
  .rotate
    animation-name: rotateThis
    animation-duration: .5s
    animation-iteration-count: infinite
    animation-timing-function: linear
  .panel
    max-width: 40ex


view main(role, role_name, {role_state, schedule, system_status}):
  <h2> "Status Info"
  <table.table.table-hover>
    <thead>
      <tr>
        <th> "Property"
        <th> "Value"
    <tbody>
      <tr>
        <td> "Version"
        <td>
          role_state.version
    if role.info:
      <tbody>
        for [name, value] of entries(role.info) key name:
          <tr>
            <td>
              name
            <td>
              value
  <h2> `Processes [${total_processes(schedule, role_name)}]`
  <table.table.table-hover>
    <thead>
      <tr>
        <th> "Host"
        <th> "Process"
        <th> "Image"
        <th> "Num"
    for [host, node] of entries(schedule.nodes) key host:
      let hrole = node.roles[role_name]
      <tbody>
        if hrole:
          for [kind, props] of entries(hrole.daemons) key kind:
            <tr>
              <td>
                host
              <td>
                kind
              <td>
                props.image
              <td>
                props.instances
  logs(role_name)
  if is_leader(system_status):
    <div>
      store @actions = pending_actions | refresher
        | json('/v1/pending_actions')

      versions(-> @actions, role, role_name)

      if role.frontend.allow_stop:
        <h2>
          if role_state.running:
            "Running "
            <button.btn.btn-default>
              link {click} execute(
                {"button": {"stop": true, "role": role_name}}
              ) -> @actions
              "Stop"
              for [id, act] of entries(@actions) key id:
                if act.button.stop:
                  " "
                  <span.glyphicon.glyphicon-refresh.rotate>
          else:
            "Stopped "
            <button.btn.btn-default>
              link {click} execute(
                {"button": {"start": true, "role": role_name}}
              ) -> @actions
              "Start"
              for [id, act] of entries(@actions) key id:
                if act.button.start:
                  " "
                  <span.glyphicon.glyphicon-refresh.rotate>
  else:
    show_leaders("Actions are Only Available on Leader", `/role/${role_name}`,
      system_status)
