import {refresher, json} from '../middleware/request'
import {format_uptime, format_diff, till_now_ms, from_ms} from '../util/time'
import {entries, keys} from '../util/object'
import json_store from '../stores/json'
import {value, set, init} from '../stores/simple'
import {url_query} from '../util/routing'
import {service_names} from '../util/services.js'


style:
  .nodes
    display: flex
    flex-direction: row
    flex-wrap: wrap
  .node
    margin: 4px
  .node
    width: 440px
    display: flex
    flex-direction: column
    border: solid 2px silver
    border-radius: 5px
    padding: 6px 12px
  .roles
    display: flex
    flex-direction: row
    flex-wrap: wrap
  .role
    margin: 5px
    font-size: 150%
    display: flex
    flex-direction: row
    align-items: center
  .role-name
    font-weight: bold
    padding-left: 4px
    padding-right: 4px
    white-space: nowrap
  .service
    padding-left: 6px
    padding-right: 6px
    font-family: monospace
    font-size: 60%
    white-space: nowrap
  .services
    display: flex
    flex-direction: row
    align-items: center
    flex-wrap: wrap
  .faded
    color: silver
  .multiplier
    color: green
    font-weight: bold
    padding-left: 2px
  h3
    margin-top: 0px
    font-size: 200%
  .padleft
    padding-left: 6px


view main():
  <div>
    store @by = value | url_query('by') | init('host')
    store @empty = value | url_query('empty') | init('show')
    <div.btn-group.padleft>
      <button.btn.btn-default.active?(@by == 'host')>
        link {click} set('host') -> @by
        "By Host"
      <button.btn.btn-default.active?(@by == 'role')>
        link {click} set('role') -> @by
        "By Role"
      <button.btn.btn-default.active?(@empty == 'hide')>
        link {click} set(@empty == 'show' ? 'hide' : 'show') -> @empty
        "Hide Empty"
    <div.nodes>
      store @schedule = json_store | refresher | json('/v1/schedule')
      if @schedule:
        if @by == 'host':
          for [node_name, info] of entries(@schedule.data.nodes) key node_name:
            <div.node>
              <h3>
                node_name
              <div.roles>
                for [role_name, role] of entries(info.roles or {}) key role_name:
                  let daemons = entries(role.daemons or {})
                  if daemons.length > 0 or @empty == 'show':
                    <span.role>
                      <span.role-name>
                        role_name
                      <span.faded>
                        "{"
                      <span.services>
                        for [d_name, daemon] of daemons key d_name:
                          if daemon.instances == 0:
                          elif daemon.instances == 1:
                            <span.service>
                              d_name
                          else:
                            <span.service>
                              d_name
                              <span.multiplier>
                                `x${ daemon.instances }`
                      <span.faded>
                        "}"
        elif @by == 'role':
          for role_name of keys(@schedule.data.roles):
            <div.node>
              <h3>
                role_name
              <div.roles>
                for [node_name, node] of entries(@schedule.data.nodes) key node_name:
                  let role = node.roles[role_name]
                  if role:
                    let daemons = entries(role.daemons or {})
                    if daemons.length > 0 or @empty == 'show':
                      <span.role>
                        <span.role-name>
                          node_name
                        <span.faded>
                          "{"
                        <span.services>
                          for [d_name, daemon] of entries(role.daemons or {}) key d_name:
                            if daemon.instances == 0:
                            elif daemon.instances == 1:
                              <span.service>
                                d_name
                            else:
                              <span.service>
                                d_name
                                <span.multiplier>
                                  `x${ daemon.instances }`
                        <span.faded>
                          "}"

      else:
        "Loading..."
